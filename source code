import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

# Sample movie dataset
movies = pd.DataFrame({
    'movie_id': [1, 2, 3, 4, 5],
    'title': ['Inception', 'Interstellar', 'The Matrix', 'The Notebook', 'Titanic'],
    'genres': ['Sci-Fi Action', 'Sci-Fi Drama', 'Sci-Fi Action', 'Romance Drama', 'Romance Drama']
})

# Sample user ratings
ratings = pd.DataFrame({
    'user_id': [1, 1, 2, 2, 3, 3, 4],
    'movie_id': [1, 2, 1, 3, 4, 5, 4],
    'rating': [5, 4, 4, 5, 3, 5, 4]
})

# Merge data
merged = ratings.merge(movies, on='movie_id')

# Step 1: Content-Based Movie Recommender (TF-IDF on genres)
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(movies['genres'])
cosine_sim = cosine_similarity(tfidf_matrix)

# Function to recommend similar movies based on content
def recommend_movies(movie_title, top_n=3):
    idx = movies[movies['title'] == movie_title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]
    movie_indices = [i[0] for i in sim_scores]
    return movies.iloc[movie_indices][['title', 'genres']]

# Step 2: Matchmaking system (User-user similarity based on ratings)
user_movie_matrix = ratings.pivot(index='user_id', columns='movie_id', values='rating').fillna(0)
user_sim = cosine_similarity(user_movie_matrix)
user_sim_df = pd.DataFrame(user_sim, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Function to find similar users
def find_similar_users(user_id, top_n=2):
    sim_scores = user_sim_df[user_id].sort_values(ascending=False)[1:top_n+1]
    return sim_scores

# Output Results
print("Movie Recommendations for 'Inception':")
print(recommend_movies('Inception'), '\n')

print("Users similar to User 1:")
print(find_similar_users(1))
